pipeline {
    agent any
    environment
    {
     DOCKERHUB_CREDENTIALS = credentials('Dockerhub')
     IMAGE_TAG = '$BUILD_NUMBER'
    }
    stages {
        
        stage('Clone')
        {
            steps{
                cleanWs()
		          git(
                   url:"https://github.com/heloise-viegas/wordsmith-replica.git",
                   branch:"main"
                  )

 
            }
        }

				     stage('Test') {
      steps {
          dir('/home/heloise/.jenkins/workspace/wordsmith/api')
          {
              sh 'pwd'
              sh 'docker build --target build --no-cache . -t heloise1/wordsmithapi:$BUILD_NUMBER'
	      sh 'id=$(docker create heloise1/wordsmithapi:$BUILD_NUMBER)'
	      sh 'echo $id'
          }
      }
    }
	    
        stage('Build') {
      steps {
          dir('/home/heloise/.jenkins/workspace/wordsmith/api')
          {
              sh 'pwd'
              sh 'docker build -t heloise1/wordsmithapi:$BUILD_NUMBER .'
          }
      }
    }
    stage('Login') {
      steps {
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
      }
    }
	

    stage('Push') {
      steps {
        sh 'docker push heloise1/wordsmithapi:$BUILD_NUMBER'
      }
        post {
          success{
      //         sh """#!/bin/bash
      //               git clone https://github.com/heloise-viegas/wordsmith-kubernetes-files.git
		    // """
		  
		 script {
			  // Define the repository URL and local directory
	                def gitRepoURL = 'https://github.com/heloise-viegas/wordsmith-kubernetes-files.git'
	                def localDirectory = './wordsmith-kubernetes-files/k8s-manifests'
	                // Clone the Git repository
	                sh "git clone ${gitRepoURL}"
                         def image = sh(script: 'cat ./wordsmith-kubernetes-files/k8s-manifests/api.yaml | grep "image"', returnStdout: true).trim()
			 echo "The value of image is: ${image}"
	                 def delimiter = 'wordsmithapi:'
		         def oldTag = """echo '${image}' | awk -F '${delimiter}' '{print \$2}'"""
			 def processedContent = sh(script: oldTag, returnStdout: true).trim()
		         echo "The value of oldTag is: ${processedContent}"

			 def filePath = './wordsmith-kubernetes-files/k8s-manifests/api.yaml'
			 def fileContent = readFile(filePath).trim()

                    // Replace the old value with the new value
                    def updatedContent = fileContent.replace(processedContent, env.BUILD_NUMBER)
                    // Write the updated content back to the file
                    writeFile(file: filePath, text: updatedContent)
		    // Print the updated content using cat
                    def updatedFileContent = sh(script: "cat ${filePath}", returnStdout: true).trim()
                    echo "Updated file content:"
                    echo updatedFileContent
			  // Stage and commit the changes
                    sh "cd ${localDirectory} && git add api.yaml"
                    sh "cd ${localDirectory} && git commit -m 'Image tag from Jenkins Pipeline'"   
                    // Push the changes to the remote repository
                   // sh "cd ${localDirectory} && git push origin main"
			 withCredentials([gitUsernamePassword(credentialsId: 'hrv-jenkins-pipeline', gitToolName: 'Default')]) {
                    sh "cd ${localDirectory} && git push https://github.com/heloise-viegas/wordsmith-kubernetes-files.git main"
		   //sh "cd ${localDirectory} && git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/your-username/your-repo.git master"
                }
			 
			 
                }
          }  
          always {
      sh 'docker rmi heloise1/wordsmithapi:$BUILD_NUMBER'
      sh 'docker logout'
    }    
   
  }
    }
  
        
        
   //      stage('Connect to Minikube from Jenkins') {
   //          steps {
   //             withKubeConfig(caCertificate: '', clusterName: 'minikube', contextName: 'minikube', credentialsId: 'Minikube23Aug23', namespace: 'default', restrictKubeConfigAccess: false, serverUrl: 'https://127.0.0.1:32769') 
   //             {
   //                 echo "----------------------"
   //                 sh 'kubectl get all'
   //             }
   //          }
			// post
			// {
			//     always{
			// 	echo "Success"
			//     }
			// }
   //      }
    }
}
