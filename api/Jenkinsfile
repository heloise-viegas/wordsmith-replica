pipeline {
    agent any
    environment
    {
     DOCKERHUB_CREDENTIALS = credentials('Dockerhub')
     IMAGE_TAG = '$BUILD_NUMBER'
    }
    stages {
        
        stage('Clone')
        {
            steps{
                cleanWs()
		          git(
                   url:"https://github.com/heloise-viegas/wordsmith-replica.git",
                   branch:"main"
                  )

 
            }
        }


  stage('Test') {
      steps {
          dir('/home/heloise/.jenkins/workspace/wordsmith/api')
          {
              sh 'pwd'
              sh 'docker build --target build --no-cache . -t heloise1/wordsmithapi:$BUILD_NUMBER'
	      sh 'id=$(docker create heloise1/wordsmithapi:$BUILD_NUMBER)'
	      sh 'echo $id'
          }
      }
    }
	    
        stage('Build') {
      steps {
          dir('/home/heloise/.jenkins/workspace/wordsmith/api')
          {
              sh 'pwd'
              sh 'docker build -t heloise1/wordsmithapi:$BUILD_NUMBER .'
          }
      }
    }
    stage('Login') {
      steps {
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
      }
    }
    stage('Push') {
      steps {
        sh 'docker push heloise1/wordsmithapi:$BUILD_NUMBER'
      }
        post {
          success{
              sh """
                    git clone https://github.com/heloise-viegas/wordsmith-kubernetes-files.git
                    cd ./wordsmith-kubernetes-files/k8s-manifests
	            tag=\$(cat api.yaml | grep "image")
	            echo \$tag
		     IFS=/ read -r var1 var2 <<< \$tag
                     IFS=: read -r var3 var4 <<< $var2
		    
                     echo $var2
		     sed -i 's/\(image: .*:\)$var4/\1$BUILD_NUMBER/' api.yaml
                   cat api.yaml
                    
                """
          }  
            
    always {
      sh 'docker rmi heloise1/wordsmithapi:$BUILD_NUMBER'
      sh 'docker logout'
    }
  }
    }
  
        
        
        stage('Connect to Minikube from Jenkins') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'minikube', contextName: 'minikube', credentialsId: 'Minikube23Aug23', namespace: 'default', restrictKubeConfigAccess: false, serverUrl: 'https://127.0.0.1:32769') 
               {
                   echo "----------------------"
                   sh 'kubectl get all'
               }
            }
			post
			{
			    always{
				echo "Success"
			    }
			}
        }
    }
}
